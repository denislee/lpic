201.1 Kernel Components
=======================

Kernel 2.6.x documentation
Kernel 3.x documentation

/usr/src/linux

/usr/src/linux/Documentation

bzImage

zImage

	Ambos o bzImage como o zImage sao comprimidos pelo gzip.

	/lib/modules/<kernel version>

	# depmod -a
		generates a new dependencies list @ modules.dep

		/lib/modules/<kernel-version>/modules.dep

	/etc/modules.conf

201.2 Compiling a kernel
========================

/usr/src/linux
GRUB configuration files
Kernel 2.6.x make targets
Kernel 3.x make targets


/boot/initrd

	initial ramdisk is a scheme for loading a temporary root file system into memory in the boot process of the linux kernel. initrd and initramfs refer to two different methods of archieving this. Both are commonly used to make preparations before the real root file system can be mounted.


mkinitrd

	creates an initial image used by the kernel for preloading the block device modules (such as IDE, SCSI or RAID) which are needed to access the root filesystem.

	automatically loads filesystem modules (such as ext3 and jbd). IDE modules, all scsi_hostadapter entries in /etc/modprobe.conf and raid modules if the system's root partition is on raid, which makes it simple to build and use kernels using modules device drivers

	any module options specified in /etc/modporbe.conf are passed to the modules as they are loaded by the initial ramdisk

	the root filesystrem used by the kernel is specified in the boot configuration file. as aways. the traditional root/dev/hda1 sytle device specification is allowed. if a label is used. as in root=LABEL=rootPart the initrd will search all available devices for an ext2 and ext3 filesystem with the appropriate label and mound that divce as the root filesystem.


mkinitramfs

	the mkinitramfs script generates an initramfs image. the initramfs is a compressed cpio archive. the archive can be used on a different box of the same arch with the corresponding linux kernel. mkinitramfs is meant for advanced usage. on your local box update-initramfs calls mkinitramfs with the relevant parameters. update-initramfs keeps sha1sum of generated initramfs. it takes care to generate backup and eventually runs the bootloader

	at boot time, the kernel unpack that archive into RAM disk, mounts and uses it as initial root file system. all finding of the root device hapens in this early userspace

	mkinitramfs -d <conf dir> -o <output file>


make

	the purpose of the make utility is to determine automaticlly which pieces of a large program need to be recompiled, and issue the commands to recompile them. 
	to propare to use make, you mus wirte a file called the makefile that describes the relationships among file sin your program, and the states the commands for updating each file. in a program, typically the executable file is updated from object files, which are in turn made by compiling source files.
	make execute commands in the makefile to update one or more target names, where name is typically a program. if no -f option is present make will look for the makefiles: GNUmakefile, makefile, and Makefile, in that order.
	normally you should call your makefile etther makefile or Makefile. (we recommand Makefile because it appears prominently near the begingin of a directory listing, right near other important files such as README.)'


make targets

	config

		update the current kernel configuration by using a line-orientend program.

	xconfig

		updates the current kernel configuration by using a QT-based graphical program

	menuconfig

		updates  the current kernel configuration using a text basesd menu progarm

	oldconfig

		updated the current kernel by using the current .config file and propting for any new options that have been added to the kernel.
	
	mrproper

		removes all of the generated files by the kernel build system, including the configuration and some various backup files.

	zImage

	bzImage

		creates a compressed kernel image and places it in the arch/i386/boot/bzImage file. this is the default target for the i386 kernel build

	modules

		builds all of the loadable kernel modules for this configuration

	modules_install

		install all of the modules into the specified location. if no location is specified with the INSTALL_MODULE_PATH environment variable, they are installed in the default root directory of the machine.

	# make bzImage
	# make modules
	# make modules_install

		(or # make all)

GRUB configuration files

	/boot/grub/menu.lst
		title
		root
		kernel
		initrd
		safedefault
		boot

	# update-grub

201.3 Patching a kernel
=======================

Customize the current kernel configuration
Build a new kernel and appropriate kernel modules
Install a new kernel and anyu modules.
Ensure that the boot manager can locate the new kernel and associated files.
/usr/src/linux/
Module configuration files

patch

	apply a diff file to an original

	patch takes a patch file patchfile containing a difference listing produced by the diff program and applies those differences to one or more original files, producing patched versions. normally the patched versions are put in place of the originals. backups can be make; see the -b or --backup option. the name of the files to be patched are usually taken from the patch file, but if there's just one file to be patched it can be specified on the command line as originalfile.

	first, patch takes an ordered list of candidate file names as follows:
		- if the header is that of a context diff, patch takes the old and new files names in the header. a name is ignored if it does not have enought slashes to satisfy the -p[num] or --strip=[num] option. the name /dev/null is also ignored.
		- if there is an index: line in the leading garbage and if either the old and new names are both absent or if patch is conforming to posix, patch take s the name in the index: line.
	/u/howard/src/blurfl/blurfl.c
		setting -p0 gives the entire file name unmodified, -p1 gives
	u/howard/src/blurfl/blurfl.c
		setting to -p4 gives
	blurfl/blurfl.c
		
make

module tools

/usr/src/linux/*

/usr/src/linux/.config

/lib/modules/kernel-version/*

/boot/*

	/boot/vmlinuz-<kernel-version>
	/boot/initrd.img-<kernel-version>

201.4
=====

patch
make
/usr/src/linux/*
/usr/src/linux/.config
/lib/modules/kernel-version/
/boot/*

	/proc/sys/kernel

	/lib/modules/kernel-version/kernel
	
		where is all the kernel modules, organized by subdirectories.

201.5 Manage/Query kernel and kernel modules at runtime
=======================================================

user command-line utilities to get information about the currently running kernel and kernel modules.
manually load and unload kernel modules
determine when modules can be unloaded
determine what parameters a module accepts
configure the system to load modules by names other than their file name.


/lib/modules/kernle-version/modules.dep

	the moduels.dep as generated by module-init-tools depmod. lists the dependencies for every module int he directories under /dliv/modules/version where modules.dep is
	black lines, and lines starting with a '#' (ignoraing spaces) are ignored. other lines are of the form "filename: [filename]*".
	for example. if /lib/modules/2.6.29/kernel/a.ko depended on b.ko and c.ko in the same directory, and c.ko depended on b.ko as well, the file mitght look like 
		/lib/modules/2.6.29/kernel/a.ko: /lib/modules/2.6.29/kernel/c.ko /lib/modules/2.6.29/kernel/b.ko
		/lib/modules/2.6.29/kernel/b.ko: 
		/lib/modules/2.6.29/kernel/c.ko: /lib/modules/2.6.29/kernel/b.ko 
	this file is used by modprobe to know the order in which to load modules (they are loaded right to left, and removed left to right.)


module configuration files in /etc


/proc/sys/kernel/

	bootloader_type:
	x86 bootloader identification
	this gives the bootloader type number as indicated by the bootloader shifted left by 4, and OR'd with the low four bits of the bootloader version. the reason for this encoding is that this used to match the type_of_loader field in the kernel header; the encoding is kept for backwards compatibility. that is, the full bootloader type number is 0x15 and the full version number is 0x234.

	domainname & hostname:
	these files can be used to set NIS/YP domainname and the hostname of your box in exactly the same way as the commands domainname and hostname, i.e.:
	# echo 'darkstar' > /proc/sys/kernel/hostname
	# echo 'mydomain' > /proc/sys/kernel/domainname

	osrelease, ostype & version:
	# cat osrelease
	2.1.88
	# cat ostype
	Linux
	# cat version
	#5 Wed Feb 25 21:44 MET 1998

	the files osrelease and ostype should be clear enough. version needs a little more clarification however. the '#5' means that this is the fifth kernel built from this source base and the date behind it indicates the time the kernel was built. the only way to tune these values is to rebuild the kernel.

	panic:
	the value in this file represents the number of seconds the kernel waits before rebooting on a panic. when you use the software watchdog, the recommended setting is 60.

	panic_on_oops:
	controls the kernels behaviour when an oops or bug is encountered.
	0: try to continue operation
	1: panic imediately. if the 'panic' sysctl is also non-zero then the machine will be rebooted.

	pid_max:
	PID allocation wrap value. when the kernel's next PID value reaches this value, it wraps back to the minimum PID value. PIDs value pid_max or larger are not allocated.

	shmall:
	this parameter set the total amount of shared memory pages that can be used system wide. hence, SHMALL should always be at least ceil (shmmax/PAGE_SIZE).
	
	shmmax:
	this value can be used to query and set the run time limit on the maximum shared memory segment size that can be created. Shared memory segments up to 1Gb are now supported in the kernel. this value defaults to SHMMAX.

	acct
	acpi_video_flags
	auto_msgmni
	bootloader_type
	bootloader_version
	callhome
	cap_last_cap
	core_pattern
	core_pipe_limit
	core_uses_pid
	ctrl-alt-del
	dmesg_restrict
	domainname & hostname
	hotplug
	kptr_restrict
	kstack_depth_to_print
	l2cr
	modules_disabled
	msg_next_id, sem_next_id and shm_next_id
	nmi_watchdog
	osrelease, ostype & version
	overflowgid & overflowuid
	panic
	panic_on_unrecovered_nmi
	panic_on_oops
	panic_on_stackoverflow
	perf_cpu_time_max_percent
	pid_max
	ns_last_pid
	powersave-nap
	printk
	printk_delay
	printk_ratelimit
	printk_ratelimit_burst
	randomize_va_space
	reboot-cmd
	rtsig-max & rtsig-nr
	ng-big-buff
	shmall
	shmmax
	shm_rmid_forced
	tainted
	unknown_nmi_panic
	watchdog_thresh


depmod

	program to generate modules.dep and map files

	depmod creates a list of modules dependencies by reading earch module under /lib/modules/version and determining what symbols it exports and what symbols it needs. by default, this list is written to modules.dep, and a binary hashed version named modules. dep.bin, in the same directory. if filenames are given on the command line, only those modules are examined (which is rerely useful unless all modules are listed). depmod also creates a list of symbols provided by modules in the file named modules.symbols and its binary hashed version, modules.symbos.bin



insmod

	simple program to insert a module into the linux kernel

	insmod is a trivial program to insert a module into the kernel: if the filename is a hypen, the module is taken from standard input. most users will want to use modprobe instead, which is more cleaver and can handle module dependencies.

	only the most general of error messages are reported: as the work of trying to link the module is now done inside the kernel, the dmesg usually gives more information about errors.


lsmod

	program to show the status of modules in the linux kernel
	lsmod is a trivial program which nicely formats the contents of the /proc/modules, showing what kernel modules are currently loaded.


rmmod

	simple program to remove a module from the linux kernel
	rmmod is a trivial program to remove a module (when module unloading support is provided) from the kernel. mos users will want to use modprobe with the -r option instead.


modinfo

	program to show information about a linux kernel module
	modinfo extracts information from the linux kernel modules given on the command line. if the module name is not a filename, then the /lib/modules/version directory is searched, as is also done by modprobe when loading kernel modules.
	

modprobe

	program to add and remove modules from the linux kernel

	modprobe intelligently adds or removes a module from the linux kernel: note that for convenience, there is no difference between _ and - in modules names (automatic underscore conversion is performed). modprobe looks in the module directory /lib/modules/'uname -r' for all the modules and other files, except for the optional /etc/modprobe.conf configuration file and /etc/modprobe.d directory. modprobe will also use module options specified on the kernel command line in the form of <module>.<option>


uname

	print system information
	print certain system information. with no option, same as -s.



202.1 Customising system startup and boot process
=================================================

linux standard base specification (LSB)

	the linux standard base is a joint project by serveral linux distributions under the organizational structure of the linux foundation to stadardize the software system structure, including the filesystem hieararchy used in the GNU/Linux operating sstem. the LSB is based on the POSIX specification, the single nix specification, and several other open standards, but extends them in certain areas.

	the goal of the LSB is to develop and promote a set of open stardards that will increase compatibility among linux distributions and enable software applications to run on any compliant system event in binary form. in addition, the lsb will help coordinate efforts to recruit software vendors to port and write products for linux operating systems.


/etc/inittab

	format of the inittab file used by the sysv-compatible init process
	the init file describe which processes are started at bootup and during normal operation (e.g. /etc/init.d/boot, /etc/init.d/rc, gettys) init distinguishes multiple runleves, earch which can have its own set of processes that are started. valid runlevels are 0-6 plus A, B, and C for ondemand entries. and entry in the inittab ifle has following format:
		id:runlevels:action:process


/etc/init.d

	Contains scripts used by the system v init tools (sysvinit). this is the traditional service management package for linux, containing the init program (the first process that is run when the kernel has finished initializing) as well as some infrastructure to start and stop services and configure them. specifically, files in /etc/init.d are shell scripts that respond to start, stop, restart and (when supported) reload commands to manage a particular service. these scripts can be invoked directly or (most commonly) via some other trigger (typically the presence of a symbolic link in /etc/rc?.d/)

	/etc/init

		contains configuration files used by upstart. upstart is a young service management package championed by ubuntu. files in /etc/init are configuration files telling upstart how and when to start, stop, reload the configuration, or query the status of a service. as of lucid, ubuntu is trasitioning from sysvinit to upstart, which explains why many services come with sysvinit scripts weven thought upstart configuration files are preferred. infact, the sysvinit script are processed by a compatibility layer in upstart.


/etc/rc.d

	K kill
	S start


chkconfig(redhat)

	updates and queries runlevel information for system servics

	# chkconfig --list --type <type> <name>
	# chkconfig --add <name>
	# chkconfig --del <name>
	# chkconfig --override <name> 
	# chkconfig --level <levels> --type <type> <name>
	# chkconfig --level <levels> --type <type> <name>

	chkconfig provides a simples command-line tool for maintaining the /etc/rc[0-6].d directory hierarchy by relieving system administrators of the task of directly manipulating the numerous symbolic link in those directories

	this implementation of chkconfig was inspired by the chkconfig command present in the IRIX operating system. rather than maintaining configuration information outside of the /etc/rc[0-6].d hierarchy, however, this version directly manages the symlinks in /etc/rc[0-6].d this leaves all of the configuration information regarding that services init starts in a single location.

	chkconfig has five distinct functions: adding new services for management, removing services from management, listing the current setartup information for services, changing the startup information for services, and checking the startup state of a particular service.
	when chconfig is run with only a service name, it checkgs to see if the service is configured to be started in the current runlevel. if it is, chkconfig returns true; otherwise it returns false. the --level option may be used to have chkconfig query an alternative runlevel rather than the current one.

	when chkconfig is run with the --list argument, or no argument at all, a listing isdisplayed of all services and their current configuration.
	if one of on, off, reset, or resetpriorities is specified after the service name, chconfig changes the startup information for the specified service. the on and off flags cause the service to be started  or stopped, respectively, in the runlevels being changed. to the reset flag resets the on/off state for all runlevels for the service to whatever is specified in the init script in question, while the resetpriorities flag resets the start/stop priorities for the service to whatever is specified in the init script.

	by default the on and off option affects only runlevels 2, 3, 4 and 5. while reset and resetpriorities affects all of the runlevels. the --level option may be used to specify which runlevels are affected.

	note that for every service, each runlevel has either a start script or a stop script. when switching runvelevels, init will not restart an already started service, and will not re-stop a service that is not running.

	chkconfig also can manage xinetd scripts via the means of xinetd.d configuration files. cnote that only the on, off, and --list commands are supported for xinitd.d services.

	chkconfig supports a --type argument to limit actions to only a specific type of services, in the case where services of either type may share a name. possible values for type are sysv and xinitd.	


update-rc.d

	install and remove systev style init script links

	update-rc.d updates the system v style init script links /etc/rc(runlevel).d/(NN)name whose target is the script /etc/init.d/name. these links are run by init when it changes runlevels; they are generally used to start and stop system services such as daemons. runlevel is one of the runveles susported by init, namely, 0123456789S, and (NN) is the two-digit sequence number that determines where in the sequence init will run the scripts.

	update-rc.d firewall start 99 1 2 3 .
	update-rc.d -f firewall remove


202.2 system recovery
=====================

inittab

GRUB

grub shell

/boot/grub/menu.lst
	grub configuration file

/boot/grub

options
	default=0
		first to be listed
	timeout=
		timeout in seconds
	splashimage=
		image background	

	e:
		edit entry

init

	process control initialization
	init is the parent of all process. its primary role is to create process from a script stored in the file /etc/inittab. this file usually has entries which cause init to spawn gettys on each line that users can log in. it also controls autonomous processes required by any particular system.

	a runlevel is a software configuration of the ssytem which allows only a selected group of processes to exist. the processes spawned by init for each of theses runlevels are defined in the ;/etc/inittab file. init can be in one of eight runlevels: 0-6 and S. the run level is changet by having a privileged user run telinit, which sends appropriate signal to init, telling it which runlevel to change to.


mount

	mount a filesystem

	all files accessible in a unix system are arrenget in one big tree, the file hieararchy, rooted at /. these files can be spread out over several devices. the mount command serves to attach the filesystem found on some device to the big file tree. conversely, the umount command will detach it again.

	the standard form of the mount command is
		mount -t type device dir


fsck
	check and repair a linux file system

	fsck is used to check and optionally repair one or more linux file systems. filesys can be a device name (e.g. /dev/hdc1, /dev/sdb2), a mount pount


telinit

	change linux runlevel.


203.1 Operating the linux filesystem
====================================

the concept of the fstab configuration
tools and utilities for handling swap partitions an files
use of UUIDs


/etc/fstab

	static information about the filesystems

	the file fstab contains descriptive information about the various file systems. fstab is only read by programs, and not written; it is the duty of the system administrator to properly create and maintain this file. Each filesystem is described on a separete line; fields on each line are separeted by tabs or spaces. lines starting with '#' are comments, blank lines are ignored. the order of reords in fstab is important because fsck, mount, and umount sequentially iterate through fstab doing their thing.

	first field

		this field describes the block special device or remote filesystem to be mounted.
		for ordinary mounts it will hold a link to a block special device node (as created by mknod for the device to be mounted, line '/dev/cdrom' or '/dev/sdb6'. for NFS mounts one will have <host>:<dir>.

	second field (mount point for the filesystem)

	third field (type of the filesystem)

	fourth field (mount options associated with the filesystem)

	fifth field

		this field is used for these filesystem by the dump command to determine which filesystems need to be dumped. if the fifth field is not present, a value of zero is returned and dump will assume that the filesystem does not neet to be dumped.

	sixth field

		this filed is used by the fsck program to determine the order which filesystem checks are done at reboot time. the root filesystem should be specified with a fs_passno of 1, and other filesystems should have a fs_passno of 2. filesystems within a drive will be checked sequentially, but filesystems on a different drives will be checked at the same time to utilize parallelism available in the hardware. if the sixth field is not present or zero, a value of zero is returned and fsck will assume that the filesystem does not need to be checked.


/etc/mtab

	the mtab (contraction of mounted filesystems table) file is a system information file, commonly found on unix-like systems. this file list all currently mounted filesystems along with their initialization options. mtab has a lot in common with fstab, the main distiction being that the latter list all available filesystems whereas the former lists only currently mounted ones. therefore mtab is usually in a format similar to that of fstab. most of the time is possible to directly use lines from mtab in fstab.


/proc/mounts

	the output found here is similar to the contents of /etc/mtab, except that /proc/mount is more up-to-date.

	the first column specifies the device that is mounted, the second column reveals the mount point, and the hird column tells the file system type, and the fourth column tells you if it is mounted read-only or read-write. the fifth and sixth columns are dummy values designed to match the formated used in /etc/mtab.


mount and umount

	mount a filesystem
	standard form of the mount command is:
		mount -t <type> <device> <dir>
	this tells the kernel to attach the filesystem found on device (which is of type <type>) at the directory <dir>. the previous contents (if any) and owner and mode of <dir> become invisible, and as long as this filesystem remains mounted, the pathname <dir> refers to the root of the filesystem on <device>


sync

	flush file system buffers
	force changed blocks to disk, update the super block.


swapon

	enable/disable devices and files for paging and swapping
	swapon is used to specify devices on which paging and swapping are to take place.

	the device or file used is given by the specialfile parameter. it may be of the form -L label or -U uuid to indicate a device by label or uuid.

	calls to swapon normally occur in the system boot scripts making all swap devices available, so that the paging and swapping activity is interleaved across several devices and files.


	swapoff disables swapping on the specified device and files. when the -a flag is given, swapping is disabled on all known swap devices and files (as found in /proc/swaps or /etc/fstab).

	
swapoff

203.2 maintaining a linux filesystem
====================================

tools and utilities to manipulate ext2, ext3 and ext4
tools and utilities to manipulate reiserfs V3
tools and utilities to manipulate xfs


fsck (fsck.*)

	check and repair a Linux filesystem

	fsck is used to check and optionally repair one or more linux filesystems. filesys can be a device name (e.g. /dev/hdc1, /dev/sdb2), a mount point (e.g., /e, /usr, /home), or an ext2 label or UUID specifier (e.g. UUID=8855... etc or LABEL=root). normally, the fsck program will try to handle filesystems on different physical disk drives in parallel to reduce the total amount of time needed to check all of them.

	if no filesystems are specified on the command line, and the -A option is not specified, fsck will default to checking filesystems in /etc/fstab serially. this is equivalent to be the -As options.


badblocks

	search a device for bad blocks

	badblocks is used to search a bad block on a device (usually a disk partition). device is the special file corresponding to the device (e.g. /etc/hdc1) last-block is the last block to be checked; if it is not specified, the last block on the device is used as a default. first-block is an optinal parameter specifying the starting block number for the test, which allows the testing to start in the middle of the disk. if it is not specified the first block on the disk is used as a default.

	if the output badblocks is going to be fed to the e2fsch or mke2fs programs, it is important that the block size is promperly specified, sinse the block numbers whiich are generated are very dependent on the block size in size by the filesystem. for this reason, it is strongly recommended that users not run badblock directlu, but rather use the -c option of the e2fsck and mke2fs programs.


mkfs (mkfs.*)

	build a linux file system
	mkfs is used to build a linux file system on a device, usually a hard disk partition. filesys is either the device name (e.g., /dev/hda1, /dev/sdb2), or a regular file that shall contain the file system. blocks is the number of blocks to be used for the file system.

	the exit code returned by mkfs is 0 on sucess and 1 on failure.

	in actuality, mkfs is simply a front-end for the various file system builds (mkfs.fstype) available under linux. the file system-specific build is searched for in a number of directories like perhaps.


dumpe2fs, xfsdump, xfsrestore

	dump ext2/ext3/ext4 filesystem information

	dumpe2fs prints the superblock and block groups information for the filesystem present on device.
	dumpe2fs is similar to beckley dumpfs program for the bsd fast file system.


debugfs, debugreiserfs

	file system debugger

	the debugfs program is an interactive file system debugger. it can be used to examine and change the state of an ext2, ext3, or ext4 file system.
	device is the special file corresponding to the device containing the file system (e.g. /dev/hdxx)


tune2fs, reiserfstune

	ajust tunable filesystem parameters on ext2/ext3/ext4 filesystems
	tune2fs allows the system administrator to ajust various tunable filesystem parameters on linux ext2, ext3 and ext4 filesystems. the current values of theses options can be displayed  by using the -l option to tune2fs porgram or by using the dumpe2fs program.


mkswap

	set up a linux swap area
	mkswap set up a linux swap area on a device or in a file

	 the device argument will usually be a disk partition (something like /dev/sdb7) but can also be file a file. the linux kernel does not look at partition ids, but many installation scripts will assume that partitions of hex type 82 (linux_swap) are meant to be swap partitions.


xfs_info, xfs_check and xfs_repair


203.3 Creating and configuring filesystem options
=================================================

autofs configuration files
UDF and ISO9660 tools and utilities
awareness of CD-ROM filesystems (UDF, ISO9660, HFS)
awareness of CD-ROM filesystem extensions (Joliet, Rock Ridge, El Torito)
basic feature knowlodge of encrypted filesystems


Joliet

	is a filesystem commonly used to store information on CD-ROM computer discs. It is defined as na extension to the ISO 9660 standard. Joliet has been specified  and endorsed by Microsoft and has been supported by all versions of its Windows operating system since Windows 95 and Windows NT 4.0 its primary focus is the relaxation of the filename restrictions inherent with full ISO 9660 compliance

	Joliet accomplishes this by supplying an additional set of filenames that are encoded in UCS-2. These filenames are stored in a special supplementary volume descriptor, that is safely ignored by ISO 9660-compliant software, thus preserving backward compatibility.

	The specification only allows filenames to be up to 64 unicode characters in lenght. However, the documentation for genisoimage states filenames up to 103 characters in lenght do not appear to cause problems.

	Many current PC operating systems are able to read Joliet-formatted media, thus allowing exchange of files between those operating sytems even if non-roman characters are involved (such as Arabic, Japanese or Cyrillic), which was formerly not possible with pain ISO 9660-formatted media. Operating systems wich can read Joliet media include:
		- Microsoft Windows
		- linux
		- Max OS X
		- FreeBSD
		- OpenSolares

	Microsoft recommends the use of the Joliet extension for developers targeting windows. It allows unicode characters to be used for all text fields, which includes file names and the volume name. a secondary volume descriptor with type 2 contains the same information as the primary code (sector 16 offset 40 bytes), but in UCS-2 in sector 17, offset 40 bytes. as a result of this, the volume name is limited to 16 characters.

	The disktype program prints the joliet unicode volume name, if present.


El Torito

	the el torito bootable CD specification is an extension to ISO 9660 CD-ROM specification. It is designed to allow a computer to boot from a CD-ROM. it was announced in november 1994 and first issued in january 1995 as a joint proposal by IBM and BIOS manufacturer phoenix technologies.

	boot modes
		according to the el torito specification, a 32-bit CPU PC BIOS will search for boot code on a ISO 9660 CD-ROM. the standard allow for booting in two different modes. Either the boot information can be accessed directly from the CD media, or in floppy emulation mode where the boot information is stored in an image file of a floppy disk, which is loaded from the CD and then behaves as a virtual floppy disk. This is useful for computers built before about 1999, which were designed to boot only from the floppy drive. For modern computers the "no emulation" mode is generally the more reliable method.

		The BIOS will assign a BIOS drive number to the CD drive. The drive number for INT 13h assigned is either 80 (hard disk emulation), 00 (floppy disk emulation) or an arbitrary number if the BIOS should not provide emulation. emulation allows older operating systems to be booted from a CD, by making it appears to them as if they were booted from a hard or floppy disk.



/etc/auto.master


/etc/auto.[dir]


mkisofs

	is effectively a pre-mastering program to generate an ISO9660/JOLIET/HFS hybrid filesystem.

	mkisofs is capable of generating the system use sharing protocol records (SUSP) specified by the Rock Ridge Interchange Protocol. this is used to further descibes the files int he iso9660 filesystem to a unix host, and provides information such as longer filenames, uid/gid/ posix permissions, symbolic links, block and character devices.

	if joliet or HFS hybrid command line options are specified, mkisofs will create additiional filesystem meta data for Joliet or HFS. the file content in this case refers to the same data blocks on the media it will generate a pure ISO9660 filesystem unless the Joliet or HFS hybrid command line options are given.


dd

	convert and copy a file
	copy a file converting and formatting according to the operands.


mke2fs

	create and ext2/ext3/ext4 filesystem
	mke2fs is used to create an ext2, ext3, or ext4 filesystem usually in a disk partition. device is the special file corresponding to the device (e.g./dev/ddXX). blocks-count is the number of blocks on the device. if omitted, mke2fs automagically figures the file system size. if called as mkfs.ext3 a journal is created as if the -j option was specified.

	the defaults of the parameters for the newly created filesystem, if not overridden by the option listed below, are controlled by the overridden by the option listed below, are controlled by the /etc/mkefs.conf configuration file.


203.4 udev device management
============================

udev rules
kernel interface


(udev)

	udev is a replacement ofor the device filesystem (devfs) starting with the linux 2.6 kernel series. it allows you to identify devices based on their properties, like vendor ID and device ID, dynamically. udev runs in userspace (as opposed to devfs which was executed in kernel space)

	udev allows for urles that specify what name is given to a device, regardless of which port is plugged into. for example, a rule to always mount a hard drive with manufacturer "iRiver"  and drive code "ABC" as /dev/iriver is possible. this consistent naming of devices guarantees that scripts dependent on a specific device's existence will not be broken
	
	the udev system is composed of some kernel services and the udevd daemon. the kernel informs the udevd daemon when certain events happen. the udevd daemon is configured to respond to events with corresponding actions. the event information comes from the kernel - the action happen in userspace. the responses to the events are configurable in "rules".

	the udevd daemon, like other damemons, starts on boot because of an init script: /etc/rcS.d/udev. its config files is in /etc/udev/udev.conf. the rules files (which amount to more configuration for udevd) are taken from /run/udev/rules.d, /etc/udev/rules.d or /lib/udev/rules.d (debian puts most of the rules in /lib/udev/urles.d). if a file with the same name is present in more than one of these directories the latter(s) files will be ignored. files in there are parsed in alpha order, as long as the name ends with ".rules". when the config file or rules files are changed, then the udevd daemon should be restarted (or, as mentioned further down this page, you can use the udevadm program)

	many of the files in /etc/udev/rules.d are links to files elsewhere. i'm guessing that's so that when the rules files are edited, the editor backups aren't left lying around where they might be used in the next restart of the udevd daemon. also since the links can have different names from the original files, then they can be ordered without having to worry about what names they have (as with the init scripts).

	udev was created to respond to hotplug type of events. much documentation refers to creating devices in response to new devices that have appeared. but, udev is more general; it can run arbitrary userspace commands in response to a new device appearing -or to whatever events it receives from the kernel.

	the times when udevd is active are:
	1. at startup, it parses all the config files and rule files and builds a rules database in memory
	2. when an event happens, it checks its rule database and performs the appropriate actions.


udevmonitor

	print the kernel and udev event sequence to the console
	udevmonitor listens to the kernel uevents and events send out by a udev rule and prints the devpath of the event to the console. it can be used analyze to the event timing by comparing the timestamps of the kernel uevent with the udev event.


/etc/udev

	linux dynamic device management
	udev supplies the system software with device events, manages permissions of the device nodes and may create additional symlinks in the /dev directory, or renames network interfaces. the kernel usually just assings unpredictable device names based on the order of discobery. meaningful syslinks or network device names provice a way to realiably identify devices based on their properties or current configuration.

	the udev daemon udevd receives device uevents directly from the kernel whenever a device is addes or removed from the system, or it changes its state. when udev receives a device event, it maches its configured set of rules agains various device attributes to indentify the device. rules that match, may provice additional device information to be stored in the udev database, or information to be used to create meaningful symlink names.

	all device information udev process, is stored in the udev database and sent out to possible event subscribers. access to all stored data and tohe event sources are provided by the library libudev.
	
	udev configuration files are placed in /etc/udev and /lib/udev. all empty lines, or lines beginning with '#' will be ignored.

	udev expects its main configuration file at /etc/udev/udev.conf it consists of a set of variables allowing the user to override default udev values. 


204.1 configuring RAID
======================

software raid configuration files and utilities


RAID 0 (striping)
	combines multple disks to present the illusion of a single storage area as large as all the combined disks. the disks are combined in an interleaved manner so that a single large accesss to the RAID device (for instance, when reading or writing a large file) results in access to all the component devices. This configuration can improve overall disk performance; if any one disk fails, data on the ramaining disks will become useless.

RAID 1 (mirroring)

RAID 4 (0 + 1)
	in raid 4, data are striped in a manner similar to RAID 0; but one drive is dedicated to holding checksum data.

RAID 5 (0 + 1)
	checksum data is striped on all the disks in the array.


mdadm.conf

	configuration for management of software raid with mdadm
	mdadm is a tool for creating, managin, and monitoring raid devices using the md driver in linux
	some common tasks, such as assembling all arrays, can be simplified by describing the deivces and arrays in this configuration file.


mdadm

	manage md (multiple devices) devices aka linux software raid

	raid devices are virtual devices created from two or more real block devices. this allows multiple devices (dipically disk drives or partitions thereof) to be combined into a single device to hold (for example) a single filesystem. some raid levels include redundancy and so can survive some degree of device failure.


/proc/mdstat

	the /proc/mdstat file shows a snapshot of the kernels RAID/MD state

	querying the status
		the kernel md state is easily viewed by running:
		# cat /proc/mdstat

	Personalities lines.
		the personalities line tells you what raid level the kernel currently supports. this can be changed by either changing the raid modules or recompiling the kernel. possible personalities include: [raid0], [raid1], [raid4], [raid5], [raid6], [linear], [multipath], [faulty]

	md device line
		each array is then described from example 1:
		md_d0: active raid5 sde1[0] sdf1[4] sdb1[5] sdd1[2] sdc1[1]

		this means we're looking at the device /dev/md_d0

		it is active or 'started'. and inactive array is usually faulty. stopped arrays aren't visible here.

fdisk

	partition table manipulator for linux

	hard disks can be divided into one or more logical disks called partitions. this division is described in the partition table found in sector 0 of the disk.

(/etc/raidtab)


204.2 ajusting storage device access
====================================

tools and utilities to configure DMA for IDE devices including ATAPI and SATA
tools and utilities to manipulate or analyse system resources (e.g. interrupts)
awareness of sdparm command and its uses


hdparm

	get/set SATA/IDE device parameters

	hdparm provides a command line interface to various kernel interfaces supported by the linux SATA/PATA/SAS 'libata' subsystem and the older IDE driver subsystem. many newer (2008 and later) USB drive enclosures now also support "SAT" (SCSI-ATA command translation) and therefore may also work with hdparm. e.g. recent WD "passport" models and recent NexStar-3 enclosures. Some options may work correctly only with the lastest kernels.

	when no options are given, -acdgkmur ir assumed. for get/set options, a query without the optional parameter (e.g. -d) will query (get) the device state, and with a parameter (.e.g, -d0) will set the device state.


sdparm

	access SCSI mode pages; read VPD pages; send simple SCSI commands.
	this utility fetches and potentially change SCSI device mode pages. Inquiry data including Vital Product Data (VPD) pages can also be displayed. commands associated with starting  and stopping the medium; loading and unloading the medium; and other housekeeping function may also be issued by this utility.
	of the three invocations shoun in the synopsis, the fisrt is the most general. the second variant that uses --enumarate is for dumping information held in sdparm's internal tables. the variant is for windows only and lists the variable device names; see the options entry for --wscan.


tune2fs

	ajust tunable filesystem parameters on ext2/ext3/ext4 filesystems.

	tune2fs allows the system administrator to ajust various tunable filesystem parameters on Linux ext2, ext3, or ext4 filesystems. the current values of these options can be displayed by using the -L option to tune2fs program, or by using the dumpe2fs program.

	the dievce specifier can either be a filename (i.e., /dev/sda1), or a LABLE or UIDD specififier: "LABEL=volume-name" or "UUID=uidd". 

	-c <max-mount-counts> 
	ajust the number of mounts after which the file system will be checked by e2fsck. if max-mount-counts is 0 or -1, the number of times the filesystem is mounted will be disregarded by e2fsck and the kernel.
	
	staggering the mount-counts at which filesystems are forcibly checked will avoid all filesystems being checked at one time when using jornaled filesystems.

	you should strogly consider the conseguences of disabling mount-count-dependant checking entirely. bad disk drives, cables, memory, and kernel bugs could all corrupt the filesystem without making the filesystem dirty or in error. if you are using journaling on your filesystem, your filesystem will never be marked dirty, so it will not normally be checked. a filesystem error detedted by the kernel will still force an fsck on the next reboot, bot it may already be too late to prvent data loos at that point.

	-C <mount-count>
	set the number of times the filesystem has been mounted. if set to a greater value than the max-mount-counts parameter se by the -c option, <e2fsck> will check filesystem at the next reboot.

	-f
	force the tune2fs operation to complete even in the face of errors. this option is useful when removing the <has_journal> filesystem feature from a filesystem which has an external journal (or is corrupted such that it appears to have an external journal), but that external journal is not available.

	-i <interval-between-checks[d|m|w]
	ajust the maximal time between two filesystems checks. no suffix or d will interpret the number <interval-between-checks> as days, m as months, and w as weeks. a value of zero will disable the time-dependent checking.

	it is strongly recommended that either -c <mount-count-dependent> or -i <time-dependent> checking to be enabled to force periodic full <e2fsck> checking of the filesystem. failure to do so may lead to filesystem corruption (due to bad disks, cables, memory or kernel bugs) going unnoticed, ultimately resulting in data loss or corruption.

	-j
	add an ext3 journal to the filesystem. if the -J option is not specified, the default journal parameters will be used to create and appropriately sized journal (given the size of the filesystem) storared within the filesystem. note that your must be using a kernel which has ext3 support in order to actually make use of the journal.

	if this option is used to create a journal on a mounted filesystem, an immutable, file .journal, will be created in the top-level directory of the filesystem, as it is the only safe way to create the journal inode while the filesystem is mounted. while the ext3 journal is invisible, it is not save to deleteit, or modify it while the filesystem is mounted; for this reason the file isimmutable. while checking unmounted filesystems, e2fsck will automatically move .journal files to the invisible, reserved journal inode. for all filesystems except for the root filesystem, this should happen automatically and naturally during the next reboot cycle. since the root filesystem is mounted read-only, e2fsck must be run from a rescue floppy in order to effect this transition.

	-J <journal-options>
	override the default ext3 journal parameters. journal options are comma separeted, and maytake an argument using the equals sign. the following jornal options are supported:

	size=<journal-size>
	device=<external-journal>

	-l
	list the contents of the filesystem superblock, including the current values of the parameters that can be set via this program.

	-L <volume-label>
	set the volume label of the filesystem. ext2 filesystem labels can be at most 16 characters long; if <volume-label> is longer than 16 characters, tune2fs will truncate it and print a warning. the volume label can be used by mount, fsck, and /etc/fstab by specifying LABEL=<volume-label> instead of a block special device name like /dev/hda5

	-u <user>
	set the user who can use the reserved filesystem blocks. user can be a numerical uid or a username. if a user name is given, it is converted to a numerical uid before it is stored in the superblock.

	-U <UUID>
	set the universally unique identifier (UUID) of the filesystem to UUID. the format of the UUID is a series of hex digits separeted by hypens.  the <UUID> parameter may also be one of the following: clear, random, time.

	
sysctl

	configure kernel parameters at runtime

	sysctl is used to modify kernle parameters at runt avaithose listed under /proc/sys/. procfs is required for sysctl support in linux. you can use sysctl to both read and write sysctl data.

	<variable>
	the name of a key to read from. an example is kernel.ostype. the '/' separator is also accepted in place of a '.'.

	<variable>=<value>
	to set a key, use the form <variable>=<value> when <variable> is the key and <value> is the value to set it to. if the value contains quotes or characters which are parsed by the shell, you may need to enclose the value in double quotes. this requires the -w parameter to use.

	-a
	display all values currently available.

/dev/hd*

/dev/sd*


204.3 logical volume manager
============================

tools in the lvm suite
resizing, renaming, creating, and removing logical volumes, volume groups and physical volumes


	Physical Volumes 

		in most cases, physical volumes are conventional partitions; however, LVM can be build atop entire disk devices if desired. Using partitions as physical volumes enables you to use partitions when they have advantages. For instance, GRUB Legacy can't read logical volumes, so you may want to put the Linux /boot directory on a partition and use another partition as an LVM physical volume

	Volume Groups

		A volume group is a collection of one or more physical volumes, which are managed as a single allocation space. the use of the volume groups as an intermediate level of organization enables you to create larger filesystems than any individual device could handle by itself. for instance, if you combine two 1 TB disks into a single volume group, you can create a filesystem of yp to 2TB.

	Logical Volumes

		as stated earlier, logical volumes are the ultimate goal of LVM. They're created and managed in volume groups much like you create and manage files in a filesystem. unlike partitions on a disk, logical volumes are created without reference to device sector numbers, and the LVM subsystem can create logical volumes than span multiple disks or that are discontiguous.


/sbin/pv*

	pvchange

		changes allocation permissions on a physical volume. you might disallow new allocations if you're making changes on other volumes and intend to delete one immediately thereafter.

	pvck

		checks the physical volume for errors; similar to fsck for filesystems.

	pvcreate

		initializes a partitions or other device for use by LVM; similar to mkfs for filesystems.

	pvdisplay

		displays information on a physical volume, including the name of the volume group to chich it belongs, its capacity, and how much of its capacity is not yet consumed by logical volumes.

	pvmove

		moves data from one physical volume to another one. you might use this prior to retiring a disk to move data off it.

	pvremove

		removes physical volume data structures form a partition; essentially the opposite of pvcreate. do not use this command until you've moved data off the physical volume and removed it from the volume group (using vgreduce).

	pvresize

		resizes the physical volume data structures. this command does not resize the partition in which it resides; that must be done before (when enlarging) or after (when shrinking) using pvresize, typically with fdisk.

	pvs

		summarizes information about physsical volume. similar to pvdisplay, but more succinct.

	pvscan

		scans disk partitions for LVM data structures.

	# pvcreate /dev/sda2

	verify if was created right using: pvdisplay, pvs:
		to ascertain how much space remains unallocated in your physical volumes.
	pvmove: to move data between physical volumes
	pvremove: to clean up after you completely remove a physical volume from a volume group.

	pvdisplay and pvs command scan both be used either with no parameters, in which case they display information on all your physical volumes, or with a device filename specification, in which case they display information on only that device.
	
	# pvmove /dev/sdb7 /dev/sda2

	this example moves all the data from /dev/sdb7 to /dev/sda2, providing /dev/sda2 is large enough. you can then use the vgreduce command, described shortly in "creating and manipulating volume groups". once this is done, you can use pvremove to ensure that the physical volue ins't picked up on future scans of the system for physical volumes.


/sbin/vg*

	vgcfgbackup

		backs up volume group metadata, by defaoults to files in /etc/lvm/backup

	vgcfgrestore

		restures volume group metadata, by default from files in /etc/lvm/backup

	vgchange

		changes certain volume group attributes. most importantly, it may be used to manually activate or deactivate a volume group.

	vgck

		checks volume gorup metadata; similar to fsck for filesystems.

	vgconvert

		converts volue group metadata from one version to another. LVM version 2 (LVM2) is the current version in 2011 and has been for some time.

	vgcreate

		creates a volume group, starting with one or more physical volumes you specify.

	vgdisplay

		displays informations on your volume groups, including information on the number of physical devices and logical volumes as well as the total and free space.

	vgexport

		makes a volume group unknown to the system, enabling it to be moved to another computer for integration into its LVM configuration

	vgextend

		adds physical volumes to an existing volume group.

	vgimport

		makes a volume group known to the system.

	vgimportclone

		imports a volume group, renaming conflicting logical volumes. this may be used if you've cloned a volume group for backup purposes and find you need to access the backup.

	vgmerge

		merges two volume groups, one of which must be inactive.

	vgmknodes

		updates the device files in /dev that refer to logical volumes normally not called manually.

	vgreduce

		removes one or more unused physical volues from a volume group

	vgremove

		completely removes a volume group from the computer; effectevely the opposite of vgcreate.

	vgrename

		renames a volume group.

	vgs

		displays summary information about a volume group; similar to vgdisplay but with more terse output.

	vgscan

		scans the system for volume groups. normally unneeded but may be helpful after hot-swapping a new disk.

	vgsplit

		splits a volume group into two; effectevely the opposite of vgmerge.


	vgchange, vgcreate, vgdisplay, vgextend, vgreduce, vgremove and vgs.

	# vgcreate speaker /dev/sda8 /dev/sdb9

	this example creates a volume group, to be called speaker, using the physical volumes /dev/sda8 and /dev/sdb9 as constituents.

	once a volume group is created, you can display information about it using vgs and vgdisplay. as with their physical volume conterparts, these commands display terse and no-so-terse summaries of volume group information.

	the vgextend, vgreduce and vgremove commands are usefull then increating the size of, decreasing the size of, or completely deleting a volume group.

	to use vgextend, pass it a volume group name followed by the filenames of one or more physical volumes you want to add:

	# vgextend speaker /dev/sdc2

	the vgreduce command is similar, except that the physical volume device filename is optional - if you omit it, the command removes all the empty physical volumes from the volume group. the vgremove command can be used without any parameters; but if you have more thant one volume group defined, you can pass that name to remove only that volume group.

	you won't normally need to use the vgchange command; however, it's very important in some emergency situations. if you need to access a volume group from an emergency boot CD, you may need use vgchange to activate your volume group:

	# vgchange -ay

	this command makes the volume group's logical volumes available. if it's not executed, either explicitly by you or in a system startup script, you won't find any device files in /dev for your logical volumes, and therefore you won't be able to access them.


/sbin/lv*

	it's time to create logical volumes. these can be created and manipulated by the commands listed in ... lthese commands all support multiple options; consult their man pages for details.

	lvchange

		changes attributes of a logical volume, such as whether it must be allocated to contiguous sectors and whether it can be written.

	lvconvert

		converts between linear, mirror and snapshot status.

	lvcreate

		creates a logical volume

	lvdisplay

		displays verbose information about logical volumes.

	lvextend

		expands the size of a logical volume. (this does not expand the contained filesystem, through.)	

	lvreduce

		shrinks a logical volume. (this does not shrink the contained filesystem, through.)

	lvremove

		deletes a logical volume

	lvrename

		renames a logical volume

	lvresize

		resizes a logical volume; does the jobs of both lvextend and lvreduce. (this does not shrink the contained filesystem, though.)

	lvs

		display a terse summary of a logical volume information

	lvscan

		scans all disks for logical volumes.

	# lvcreate -L 20G -n deb_root speaker

	this command creates a 20GB logical volume (-L 20G) called deb_root (-n deb_root) on the speaker volume group. one additional option deserves attention: -i (or --stripes). this option specifies the number of stripes used to create the volume. if your volume group spans multiple physical volumes on different physical disks, you can improve performance by striping the logical volume across different physical disks, much like a RAID o array. Specifying -i 2 will spread the logical volume across two devices. whether or not you stripe your logical volume, you can specify particular devices the logical volume is to occupy by adding the device filenames to the command:

	# lvcreate -L 20G -i 2 -n deb_root speaker /dev/sda8 /dev/sdc2

	once a logical volume is created, it becomes accessible through at least two device files.

	/dev/mapper
		the device file in /dev/mapper is the true device node, while the file in /dev/groupname is a symbolic link to the file in /dev/mapper; however, some distributions create a true device node under some other name, such as /dev/dm-0, and both the /dev/mapper files and those in /dev/groupname are symbolic links to this other file.

	/dev/groupname/logname

	/dev/mapper/speaker-deb_root

	/dev/speaker/deb_root

	if you find that a logical volume has become too small, you can expand it with lvextend or lvresize:

	increase size
	# lvextend -L +10G /dev/speaker/PCLOS
	# resize2fs /dev/speaker/PCLOS

	decrease size
	# resize2fs /dev/speaker/PCLOS 20G
	# lvresize -L 20G /dev/speaker/PCLOS

	creating and using an LVM
	1. # pvcreate /dev/sdb1
	2. # vgcreate testvg /dev/sdb1	
	3. # pvdisplay
	4. # lvcreate -L 5G -n testvol testvg
	5. # ls /dev/mapper
	6. # lvdisplay /dev/testvg/testvol
		to view information on the logical volume. verify that it's correct size. (syou can use the filename /dev/mapper/testvg-testvol instead of /dev/testvg/testvol, if you like)
	7. # mkfs -t ext3 /dev/mapper/testvg-testvol
	8. # mount /dev/mapper/testvg-testvol /mnt	

	1. pvcreate
	2. vgcreate
	3. lvcreate

	# lvcreate -L 10G -s -n snappy /dev/speaker/PCLOS
		creates a snapshot.

mount


/dev/mapper

	in the linux kernel, the device mapper serves a generic framework to map one block device onto another. it forms the foundation of lvm2, software RAIDs, dm-crypt disk encryption, and offers additional features such as file-system snapshots.

	device mapper works by passing data from a virtual block device.


205.1 basic networking configuration
====================================

utilities to configure and manipulate ehternet network interfaces
configuring wireless networks

iwconfig
	is similar to ifconfig, but is dedicated to the wireless interfaces. it is used to set the parameters of the network interface which are specific to the wireless operation (e.g., frequency). iwconfig may also be used to display those parameters, and the wireless statistics. (extracted from /proc/net/wireless)

	all these parameters and statistics are device dependent. each driver will provide only some of them depending on hardware support, and the range of values may change. pelase refer to the man page of each device for details.

205.1 advanced network configuration and troubleshooting
========================================================

utilities to manipulate routing tables
utilities to configure and manipulate ethernet network interfaces
utilities to analyse the status of the network devices
utilities to monitor and analyse the TCP/IP traffic
openvpn


/sbin/route

	route manipulates the kernels ip routing tables. its primary use is to set up static routes to specific hosts or networks via an interface after it has been configured with the ifconfig program

	del
		delete a route
	add
		add a new route
	target
		the destination network or host. you can provide ip addresses in dotted decimal or host/network names.
	-net
		the target is a network
	-host
		the target is a host
	netmask NM
		when adding a network route, the netmask to be used
	gw
		route packets via a gateway.


/sbin/ifconfig

	is used to configure the kernel-resident network interfaces. it is used at boot time to set up interfaces as necessary. after that it is usually only needed when debugging or when system turning is needed.


/bin/netstat

	print network connectionsl, routing tables, interface statistics, masquerade connections and multicast memberships.

	by default, netstat displays a list of open sockets. if you don't specify any address families, then the active sockets of all configured address families will be printed.


/bin/ping

	ping uses the ICMP protocol's mandatory ECHO_REQUEST datagram to elicit an ICMP ECHO_RESPONSE from a host or gateway. ECHO_REQUEST datagrams ("pings") have an IP and ICMP header, followed by a struct timeval and then an arbitrary number of pad bytes used to fill out the packet.

/usr/sbin/arp

	manipulate the system ARP cache

	arp manipulates the kernels ARP cache in various ways. the primary options are clearing an address mapping entry and manually setting up one. for debugging purposes, the arp program also allows a complete dump of the ARP cache.


/usr/sbing/tcpdump

	tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression. it can also be run with the -w flag, which uses it to save the packet data to a file for later analysis, and/or with the -r flag, which causes it to read from a saved packet file rather than to read packets from a network interface. it can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcpdump.

	x packets captured
	x packets received by filter
	x print MAC addresses for protocols


	-i <interface>
	select an interface. when dumping the ARP cache only entries matching the specified interface will be printed. when setting a permanent or temp ARP entry this interface will be associated with the entry;

	-s <hostname>
	create an ARP address mapping entry for host hostname with hardware address set to hw_addr class, but most classes one can assume that the usual presentation can be used.

	-f <filename>
	similar to the -s option, only this time the address info is taken from file filename setup.


/usr/sbing/lsof

	lists on its standard output file information about files opened by process for the following UNIX dialects:

		AIX, Apple Darwin, FreeBSD, Linux, Solaris

	an open file may be a regular file, a directory, a block special file, a character special file, an executing text reference, a library, a stream or network file (internet socket, NFS file or UNIX domain socket.) a specific file or all the files in a file system may be selected by path. 

	instead of a formated display, lsof will produce output that can be parsed by other programs. See the -F, option dscription, and the OUTPUT FOR OTHER PROGRAMS section for more information.

	in addition to producing a single output list, lsof will return in repeat mode. in repeat mode it will produce output, delay, then repeat the output operation until stopped with an interrupt or quite signal. 

	in the absence of any options, lsof lists all open files belonging to all active processes.

	if any list request option is specified, other list requests must be specifically requested.

/usr/bin/nc

	the nc (or netcat) utility is used for just about anything under the sun involving TCP or UDP. it can open TCP connecitons, send UDP packets, listen on arbitrary TCP and UDP ports, do port scanning, and deal with both IPv4 and IPv6. unlike telnet, nc scripts nicely, and separetes error messages onto standard error instead of sending then to standard output as telnet does with some.

/sbin/ip

	-V
		print the version of the ip utility and exit.

	-s
		output more information. if the option appers twice and more, the amount of information increases. as a rule, the information is statistics or some time values.

	-f
		followed by protocol family identifier: inet, inet6 or link, enforce the protocol family to use. if the option is not presente, the protocol family is guessed from other arguments. if the rest of the command line does not give enough information to guess the family, ip falls back to the default one, usually inet or any. link is a special family identifier meaning that no networking protocol is involed

	-o
		output each record on a single line, replacing line feeds with the \ character. this is convenient when you wanto to count records with wc or to grep the output		

	-r 
		use the systems name resolver to print DNS names intead of host addresses.

/etc/openvpn/*


openvpn

	openvpn is an open source vpn daemon by james yonan. because openvpn tries to be a universal vpn tool offering a great deal of flexibility, there are a lot of options on this manual page. if you're new to openvpn, you might want to skip ahead to the examples section where you will see how to construct simple vpns on the command line without even needing a configuration file.

	also note that there's more documentation and examples on the openvpn web site: http://openvpn.net/

	and if you would like to see a shorter version of this manual, see the openvpn usage message which can be obtained by running openvpn without any parameters.


	openvpn is a robuts and highly flexible vpn daemon. openvpn supports SSL/TLS security, ethernet bridging, TCP or UDP tunnel transport through proxies or NAT, support for dynamic IP addresses and DHCP, scalability to hundreds of thousands of users, and portability to most major OS plataforms.

	openvpn is tightly bound to the openSSL library, and derives much of its crypto capatibilities from it.

	openvpn supports conventional encryption using a pre-shared secret key (static key mode) or public key security (SSL/TLS mode) using client ^& service certificates. openVPN also supports non-encrypted TCP/UDP tunnels.

nmap

	nmap "netowork mapper" is an open source tool for network exploration and security auditing. it was designed to rapidly scan large networks, although it works fine aagainst single hosts. nmap uses raw ip packets in novel ways to determine what hosts are available on the network, what services (applications name and version those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.). while nmap is commonly used for security audits, many systems and network administrators find it useful for routine tasks such as network inventory, managing service upgrade scheludes, and monitoring host or service uptime.

	the output from nmap is a list of scanned targets, with supplemental information on each depending on the options used. key among that information is the "interesting ports table"... that table lits the port number and protocol, service name, and state. the state is either open, filtered , closed, or unfiltered. open. means that a firewall, filter, or other network obstable is blocking the port so that nmap cannot tell whether it is open or closed. closed. ports have no application listening on then, though they could open up at any time. ports are classified as unfiltered. when they are responsive to nmap's probes, but nmap cannot determine whether they are open or closed. nmap reports the state combinations open/filtered and closed/filtered when it cannot determine which of the two states describe a port. the port table mayh also include software version details when version detection has been requested. when an IP protocol scan is requests (-sO) namp provides information on supported IP protocols rather than a listeing ports.

	in addition o the interesting ports table, nmpa can profive further inforation on targets, including reverse dns names, operating system guesses, device types, and MAC addresses.

	A typical nmap scan is shown in example 1. the only namp argument is used in this example are -A, to enable OS and version detection, script scanning, and traceroute; -T4 for faster execution; and then the two target hostnames.

	# nmap -A -T4 scanme.nmap.org

wireshark

	wireshard is a gui network protocol analyzer. it lets you interactively browse packet data from a live network or from a previously saved capture file. wireshark's native capture file format is libpcap format, which is also the format used by tcpdump and various other tools.

	wireshark can read/ import the following file formats:

	- libpcap, tcpdump and various other tools using tcpdump's capture format.
	- snoop and atmsnoop

	there is no need to tell wireshark what type of file you are reading; it will determine the file type by itself. wireshark is also capable of reading any of these file formats if they are compressed using gzip. wireshark recognizes this directly from the file; the '.gz' extensions is not required for this purpose.

	like other protocol analyzers, wireshark's main window shows 3 views of a packet. it shows a summary line, briefly describing what the packet is. A packet details display is shown, allowing you to drill down to exact protocol or field that you interested in. finally, a hex dump shows you exactly what the packet looks like when is goes over the wire.

	in addition, wireshark has some features that make it unique. it can assemble all the packets in a TCP conversation and show you the ASCII data in that conversation. display filters in wireshark are very powerful; more fields are filterable in wireshark than in other protocol analyzers, and the syntax you can use to create your filters is richer. as wireshark progresses, expect more and more protocol fileds to be allowed in display filters.

	packet capturing is performed with the pcap library. the capture filter syntax follows the rules of the pcap library. this syntax is different from the display filter syntax.

	compressed file support uses (and therefore requires) the zlib library. if the zlib library is not present, wireshart will compile, but will be unable to read compressed files.

	the pathname of a capture file to be read can be specified with the -r option or can be specified as a command-line argument.

205.3 troubleshooting network issues
====================================

location and content of access restriction files
utilities to configure and manipulate ethernet network interfaces
utilities to manage routing tables
utilities to list network states
utilities to gain information about the network configuration
methods of information about the recognised and used hardware devices
system initialisation files and their contents (sysv init process)


/sbin/ifconfig
	is used to configure the kernel-resitent netowork interfaces. it is used at boot time to set up interfaces as necessary. after that, it is usually only needed when debugging or when system tuning is needed.

	if no arguments are given, ifconfig displays the status of the currently active interfaces. if a single interface argument is given, it displays the status of the given interface only; if a single -a argument is given, it display the status of all interfaces, even those that are down. otherwise, it configures an interface.

	options

	interface
		the name of the interface. this is usally a driver name followed by a unit number, for example eth0 for the first ethernet interface.

	up
		this flag causes the interface to be activated. it is implicity specified if an address is assigned to the interface

	down
		this flag causes the driver for this interface to be shut down.

	-arp
		enagle or disable the use of the arp protocol on this interface.

	promisc
		enable or disable the promiscuous mode of the interface. if selected, all packets on the network will be received by the interface.

	add address
		add an ipv6 address to an interface
	del add
		remove an IPv6 address from an interface


/sbin/route

	route manipulates the kernels IP routing tables. it is primary use is to set up static routes to specific hosts or networks via an interface after it has been configured with the ifconfig program.

	when the add or del options are used, route modifies the routing tables. without these options, route displays the current contents of the routing tables.


/bin/netstat

	netstatis prints information about the linux network subsystem. the type of information printed is controlled by the first argument, as follows:

	by default, netstat displays a list of open sockets. if you don't specify any address families, then the active sockets of all configured address families will be printed.

/etc/network


/etc/sysconfig/network-scripts/

	(redhat)
	two lesser used types of interface configuration files found in /etc/sysconfig/network-scripts are <alias> and <clone> files, which include an additional component in the name of the file beyond the interface name.

	alias interface configuration files take names in the format of ifcfg-<ifname>:alias-value>, and they allow an alias to point to an interface. for example, if ifcft-eth0:o file could be configured to specify DEVICE=eth0:0 and a static ip address of 10.0.0.2, serving as an alias of an ethernet interface already configured to receive its IP information via DHCP in ifcfg-eth0. at that point, the eth0 device is bound dto a dynamic iP address, but it can always be referred to on that system via the fixed 10.0.0.2 IP address.

	clone interface configuration file has a name similar to ifcfg-<if-name>-<clone-name>. while an alias file is another way to refer to an existing interface configuration file, a clone file is used to specify additional options when specifying an interface. for example, if you have a standard DHCP Ethernet interface called eth0, it may look similar to this:
	DEVICE=eth0
	ONBOOT=yes
	BOOTPROTO=dhcp

	since userctl is not set to yes, users cannot bring this interface up and down. to give users this ability, create a clone called user from ifcfg-eth0 which allows user to bring up and down the eth0 interface. the resulting name of the clone would be ifcfg-eth0-user and would only need one line:
	USERCTL=yes

	when a user moves to bring up the eth0 interface with the ifup eth0-user command, the configuration options from ifcfg-eth0 and ifcfg-eth0-user are used together. while this is a very basic example, this method can be used with a variety of options and interfaces.

	the easiest way to create alias and clone interface configuration files is to use a gui-based network configuration (redhat-config-network) tool.


/var/log/syslog

	sysklogd provides two system utilities which provide support for system logging and kernel message trapping. support of both internet and unix domain sockets enables this utility package to support both local and remote logging.

	system logging is porvided by a version of syslogd derived from the stock BSD sources. support for kernel logging is provided by the klogd utility which allows kernel logging to be conducted in either a standalone fashion or as a client of syuslogd

/var/log/messages


/bin/ping


/etc/resolv.conf

	the resolver is a set of routines in the C library that provide access to the internet domain name server (DNS). the resolver configuration file contain information that is read by the resolver routines the first time they are invoked by a process. the file is designed to be human readable and containts a list of keyworkds with values that provide various types of resolver information.

	if this file does not exist, only the name server on the local machine will be queried; the domain name is determined from the hostname and the domain search path is contructed from the domain name.

	the different configuraiton options are:

	nameserver (name server IP addres)

		internet address of a name server that the resolver should query.

	domain (local domain name)

		most queries for names withing this domain can use short names relative to the local domain. if no domain entry is present, the domain is determined from the local hostname returnned by gethostname; the domain part is taken to be everything after the first '.' finally, if the hostname does not contain a domain part, the root domain is assumed.

	search (search list for host-name lookup)

		the search list is normally determined fromt he local domain name; by default, it contains only the local domain name. this may be changed by listing the desired domain search path following the search keyword with spaces or tabs separating the names. resolver queiries having fewer than ndots dots (default is 1 ) in them will be attempted using each component of the search path in turn until match is found. for evnironments with multiple subdomains please read options ndots:n below to avoid man-in-the-middle attacks and unnecessary traffic for the root-dns-servers. note that this procress may be slow and will generate a lot of network traffic if the servers for the listed domains are not local, and that queries will time out if no server is available for one of the domains. the search list is currently limited to six domains with a total of 256 characters.


/etc/hosts


/etc/hosts.allow

	this manual page describes a simples accesss control language that is based on client (host name/address, username), and server (process name, host name/address) patterns. examples are given at the end.

	an extened version of the access control language is described in the hosts options document. the extensions are turned on at program build time by building with -DPROCESS_OPTIONS.

	in the following text, daemon is the process name of a network daemon process, and client is the name and/or address of a host requesting service. network daemon process names are specified in the inetd configuration file.

	access control files

	the access control software consults two files. the seach stops at the first match:

	1. /etc/hosts.allow
	2. /etc/hosts.deny
	3. will be granted.

	wildcards

	ALL
		the universal wildcard, always matches.

	LOCAL
		matches any host whose name does not contain a dot character

	UNKNOWN
		matches any user whose name is unknown, and matches any host whose name or address are unkown. this pattern should be used with care: hostnames may be unavailable due to temporary name server problems.

	KNOWN
		matches any user whose name is known, and matches any host whose name and address are known. this pattern should be used with care.

	PARANOID
		matches any host whose name does not match its address. when tcpd is built with -DPARANOID (default mode), it drops requests from such clients even before looking at the access control tables. build without -DPARANOID when you want more contro over such requests.

/etc/hosts.deny

	/etc/hosts.deny
		ALL:ALL
		block everything


/etc/hostname

	Your default hostname

/etc/HOSTNAME


/bin/hostname

	hostname is the program that is used to either set or display the current host, domain or naode name of the system. these names are used by many of the networking programs to identify the machine. the domain name is also used by NIS/YP.


/usr/sbin/traceroute


/usr/bin/dig


/bin/dmesg


/usr/bin/host


205.4 notify users on system-related issues

automate communication with users through logon messages
inform active users of system maintenance

/etc/issue


/etc/issue.net


/etc/motd


wall

	write a message to users

	walls displays the contentes of file or, by default, its standard input, on the terminals of all currently logged in users.

	only the super user can wirte on the terminals of users who have chosen to deny messages or are using the program which automatically denies messages
	reading from a file is refused when the invoker is not superuser and the program is suid or sgid.


/sbin/shutdown


206.1 make and install programs from source
===========================================

unpack source code using common compression and archive utilities
understand basics of invoking make to compile programs
apply parameters to a configure script
know where sources are stored by default

/usr/src/

gunzip

gzip

bzip2

tar

configure

make

uname

install


206.2 backup operations
=======================

knowledge about directories that have to be include in backups
awareness of network backup solutions such as amanda, bacula and backupPC
knowledge of the benefits and drawbacks of tapes, CDR, disk or other backup media
perform partial and manual backs.
verify the integrity of backup files.
partially or fully restore backups.


(Amanda)

	Amanda, the Advanced Maryland Automatic Network Disk Archiver, is a backup solution that allows the IT administrator to set up a single master backup served to backup multiple hosts over network to tape drives/chargers or disks or optical media. Amanda usees native utilities and formats (e.g., dump and/or GNU tar) and can back up a large number of servers and workstatings running multiple versions of linux or unix. amanda uses a native windows client back up microsoft windows desktops and server.


(Bacula)

	bacula is a set of open source, computer programs that permit you (or the system administrator) to manage backup, recovery, and verification of computer data across a network of computers of different kinds. Bacula is reatively easy to use and efficient, while offering many advanced storage management features that make it easy to find and recover lost or damaged files. in technical terms. it is an open source, network based backup program.
	according to source forge statistics (rank and downloads). bacula is by far the most popular open source program backup program.


(BackupPC)

	BackupPc is a high-performance, enterprise-grade system for backing up linux, win and macosX Pcs and laptops to a server's disk. backupPC is highly configurable and easy to install and maintain.


/bin/sh


cpio

	copy files to and from archives.
	support: binary, old ASCII, new ASCII, crc, HPUX binary, HPUX old ASCII, old tar, and POSIX.1 tar.
	the tar format is provided for compatibility with the tar program. by default, cpio creates binary format archives, for compatibility with older cpio programs. when extrating from archives, cpio automatically recognizes which kind of archives it is reading and can read archive created on machines with a differente byte-order.

dd

tar

/dev/st*

/dev/nst*


mt

	control magnetic tape drive operation
	the default tape device to operate on is taken from the file /usr/include/sys/mtio.h when mt is compiled. it can be overridden by giveing a device file name in the environment variable TAPE or by a command line option, which also overrides the envrironment variable.


rsync

	a fast, versitile, remote (and local) file-copying tool
	rsync is a fast and extraordinarily versatile file copying tool. it can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon. it offersa large number of options that control every aspect of its behavior and permit very flexible specification of the set of files to be copied. it is famous for its delta-transfer algorithm, which reduces the amount of data sent over the network by sending only the differences between and mirroring and as an improved copy command for everydate use.

	rsync finds files that need to be transferred using a "quick check" algorithm (by default) that looks for files that have changed in size or in last-modified time. any changes in the other preserved attributes (as requeted by options) are made on the destination file directly when the quick check indicates that the file's data does not need to be updated.


207.1 basic dns server configuration
====================================

bind 9.x configuration files, terms and utilities
defining the location of the bind zone files in bind configuration files
reloading modified configuration and zone files

/etc/named.conf


/var/named/*


/usr/sbin/rndc

	name server control utility

	rndc controls the operation of a name server. it supersedes the ndc utility that was provided in old bind releases. if rndc is invoked with no commmand line options or arguments, it prints a short summary of the supported commands and the available options and their arguments.

	rndc communicates with the name server over a TCP connection, sending commands authenticated with digital signatures. in the current versions of rndc and named, the only supported authentication algorithm is HMAC-MD5, which uses a shared secret on each end of the connection. this provides TSIG-style authentication for the command request and the name server's response. all commands sent over the channel must be signed by a key_id know to the server.

	rndc reads a configuration file to determine how to contatct the name server is decide that algorigthm and key it should use.

kill

	the command kill sends the specified signal to the specified process or process group. if no signal is specified, the TERM signal is sent. The TERM signal will kill processes which do not catch this signal. for other processes, it may be necessary to use the KILL (9) signal, since this signal cannot be caught.

	most modern shells have a builtin kill function, with a usage rather similar to that of the command described here. the '-a' and '-p' options, and the possibility to specify PIDs by command name is a local extension.

	if sig is 0, then no signal is sent, but error checking is still performed


207.2 create and maintain dns zones
===================================

bind 9 configiration files, terms and utilities
utilities to request information from the dns server
layout, content and file location of the bind zone files
various methods to add a new host in the zone files, including reverse zones

/var/named/*

zone file syntax

resource record format

dig

	DNS lookup utility

	dig (domain information grouper) is a flexible tool for interrogating DNS name servers. it performs dns lookups and displays the answers that are returned from the name server(s) that were queried. most DNS administrators use dig to troubleshoot DNS problems because of its flexibility, ease of use and clarity of output. other lookup tools tend to have less functionality that dig.
	unless it is told to query a specific name server, dig will try each of the servers listed in /etc/resolv.conf


nslookup

	query interntet name servers interactively
	
	nslookup is a program to query internet domain name servers. nslookup has two modes: interactive and non-interactive. interactive mode allows the user to query name servers for information about various hosts and domains or to print a list of hosts in a domain. non-interactive mode is used to print just the name and requestes information for a host or domain


host

	dns lookup utility

	host is a simple utility for performing dns lookups. it is normally used to convert names to ip addresses and vice versa. when no arguments or options are given, host prints a short summary of its command line arguments and options.

	name is the domain name that is to be looked up. it can use be a dotted-decimal ipv4 addres or a colon-delimited ipv6 address, in which case host will by default perform a reverse lookup for that address server is an optional argument which is eighter the name or ip address of the name server that host should query instead of the server or servers listed in /etc/resolv.conf

207.3 securing a dns server
===========================

bind 9 configuration files
configuring bind to run in a chroot jail
split configuration of bind using the forwarders statement

/etc/named.conf

/etc/passwd


dnssec

	domain name system security extensions

	protect agains DNS cache poisoning. all ansewers from DNSSEC protected zones are digitally signed. by checking the digital signature, a DNS resolver is able to check if the information is identical (i.e., unmodified and complete) to the information published by the zone owner and served on a authoritative DNS server. While protecting ip address is the immediate conrsert for many users, DNSSEC can protect any data publicshed in the DNS , including text records (TXT), mail exchange records (MX), and can be used to bootstrap other security systems that publichs references to cryptographic certificates stored in the DNS such as Certificate Records, SSH firngerprints, IPSec public keys, and TLS.

	DNSSEC does not provite confidentialy of data; in particular, all DNSSEC responses are authenticted but not encrypted. DNSSEC does not protect agains DOS attacks directly. though it indirectly provides some benefit (because signature checking allows the use of potentially untrustworthy parties).

	DNSSEC works by digitally signing records for DNS lookup using public-key cryptography. The correct DNSKEY record is authenticated wia a chain of trust, stating with a set of verified public keys for the DNS root zone which is the trusted third party.	
	

dnssec-keygen

	DNSSEC key generation tool

	dnssec-keygen generates keys for DNSSEC (secure dns), as defined in RFC 2535 and RFC 4034. ti can also generate keys for use with TSIG (transaction signatures) as defined in RFC 2845, or TKEY (transaction key) as defined in RFC 2930.

	the name of the key is specified on the command line. for DNSSEC keys, this must match the name of the zone for which the key is being generated.
	dnssec-keygen -a DSA -b 768 -n ZONE example.com
	
	the command would print a string of the form:
	
	Kexample.com.+003+26160.key
	Kexample.com.+003+26160.private.

